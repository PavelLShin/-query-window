{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios'\n\nconst initialState = [];\n\n// запрос из бд\n// export const fetchDay = createAsyncThunk(\n//   'calendarDay/fetchDay',\n//   async (url) => {\n//     try {\n//       const res = await axios.get(url)\n//       return res.data\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   }\n// )\n\nconst dataSlice = createSlice({\n  name: 'dataSlice',\n  initialState,\n  reducers: {\n    addData: (state, action) => {\n      state.push(action.payload);\n    }\n    // changeDay: (state, action) => {\n    //   let id = state.findIndex((el) => el.id === action.payload.id)\n    //   state.splice(id, 1, action.payload)\n    // },\n    // deleteDay: (state, action) => {\n    //   return state.filter((elem) => elem.id !== action.payload)\n    // },\n  }\n  // Редьюсер для асинхронных запросов 1\n  //   extraReducers: (builder) => {\n  //     // первым аргументом идёт фулфилд запроса, вторым - редьюсер после успешного получения данных (изменение state)\n  //     builder.addCase(fetchDay.fulfilled, (state, action) => {\n  //       console.log(action.payload)\n  //       return (state = action.payload)\n  //     })\n  //   },\n});\nexport const {\n  addData\n} = dataSlice.actions;\nexport const selectData = state => state.dataSlice;\nexport default dataSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","dataSlice","name","reducers","addData","state","action","push","payload","actions","selectData","reducer"],"sources":["D:/JSProject/Testovoe/frontend/src/State/dataSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n// import axios from 'axios'\r\n\r\nconst initialState = []\r\n\r\n// запрос из бд\r\n// export const fetchDay = createAsyncThunk(\r\n//   'calendarDay/fetchDay',\r\n//   async (url) => {\r\n//     try {\r\n//       const res = await axios.get(url)\r\n//       return res.data\r\n//     } catch (error) {\r\n//       console.log(error)\r\n//     }\r\n//   }\r\n// )\r\n\r\nconst dataSlice = createSlice({\r\n  name: 'dataSlice',\r\n  initialState,\r\n  reducers: {\r\n    addData: (state, action) => {\r\n      state.push(action.payload)\r\n    },\r\n    // changeDay: (state, action) => {\r\n    //   let id = state.findIndex((el) => el.id === action.payload.id)\r\n    //   state.splice(id, 1, action.payload)\r\n    // },\r\n    // deleteDay: (state, action) => {\r\n    //   return state.filter((elem) => elem.id !== action.payload)\r\n    // },\r\n  },\r\n  // Редьюсер для асинхронных запросов 1\r\n  //   extraReducers: (builder) => {\r\n  //     // первым аргументом идёт фулфилд запроса, вторым - редьюсер после успешного получения данных (изменение state)\r\n  //     builder.addCase(fetchDay.fulfilled, (state, action) => {\r\n  //       console.log(action.payload)\r\n  //       return (state = action.payload)\r\n  //     })\r\n  //   },\r\n})\r\n\r\nexport const { addData } = dataSlice.actions\r\n\r\nexport const selectData = (state) => state.dataSlice\r\nexport default dataSlice.reducer\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA,MAAMC,YAAY,GAAG,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,WAAW;EACjBF,YAAY;EACZG,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ;AAAQ,CAAC,GAAGH,SAAS,CAACQ,OAAO;AAE5C,OAAO,MAAMC,UAAU,GAAIL,KAAK,IAAKA,KAAK,CAACJ,SAAS;AACpD,eAAeA,SAAS,CAACU,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}